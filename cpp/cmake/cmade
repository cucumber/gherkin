#!/usr/bin/env -S cmake -P
# -*- CMake -*-

set(CMADE "cmade")
set(CMADE_DEPSFILE "deps.txt")
set(CMADE_VERSION "X.Y.Z")
list(
    APPEND
    CMADE_VARS
    "CMADE_GIT_HOST=GH"
    "CMADE_GH=https://github.com"
    "CMADE_GL=https://gitlab.com"
    "CMADE_BB=https://bitbucket.org"
)
list(
    APPEND
    CMADE_OPTIONS
    "verbose"
    "simulate"
    "no-cache"
)


##############################################################################
#
# Utility functions
#
##############################################################################
function(cmade_show_help)
    message("\
CMake Dependency Installer v${CMADE_VERSION}

usage: ${CMADE} [OPTIONS] COMMAND

Options:
  --verbose     Verbose operation
  --simulate    Echo commands instead of running them
  --no-cache    Ignore/erase existing repositories

Commands:
  install       Install dependencies from ${CMADE_DEPSFILE}
  clean         Clean local environment
  help          Display this information
")
endfunction()

function(cmade_die MSG)
    message(FATAL_ERROR "CMade: error: ${MSG}")
endfunction()

function(cmade_msg MSG)
    message("CMade: ${MSG}")
endfunction()

function(cmade_info MSG)
    if(CMADE_VERBOSE)
        cmade_msg(${MSG})
    endif()
endfunction()

function(cmade_setg VAR VAL)
    set(${VAR} "${VAL}" CACHE INTERNAL "${VAR}")
endfunction()

function(cmade_run_prog)
    cmake_parse_arguments(RUN "" "DIR" "CMD" ${ARGN})

    if(CMADE_SIMULATE)
        list(PREPEND RUN_CMD "echo")
    endif()

    execute_process(
        COMMAND ${RUN_CMD}
        WORKING_DIRECTORY "${RUN_DIR}"
        RESULTS_VARIABLE RC
    )

    if(RC)
        list(JOIN ARGV " " RUN_CMD)
        cmade_die("command failed: ${RUN_CMD}")
    endif()
endfunction()

function(cmade_download URL FILE)
    if(CMADE_SIMULATE)
        cmade_msg("download ${URL} to ${FILE}")
    else()
        file(DOWNLOAD ${URL} ${FILE} STATUS ST)
    endif()

    list(GET ST 0 RC)

    if(RC)
        cmade_die("download of ${URL} failed: ${ST}")
    endif()
endfunction()

function(cmade_unique_dir PATH VAR)
    file(GLOB PATHS "${PATH}/*")

    foreach(PATH ${PATHS})
        if(IS_DIRECTORY ${PATH})
            list(APPEND ALL_DIRS ${PATH})
        endif()
    endforeach()

    list(LENGTH ALL_DIRS DIRS)

    if(DIRS EQUAL 0)
        cmade_die("no directories found in ${PATH}")
    elseif(DIRS GREATER 1)
        cmade_die("multiple directories found ${PATH}")
    endif()

    list(GET ALL_DIRS 0 DIR)
    set(${VAR} ${DIR} PARENT_SCOPE)
endfunction()

function(cmade_set_cache_dir NAME)
    string(REPLACE "/" "_" DIR ${NAME})
    set(DIR "${CMADE_CACHE}/${DIR}")
    cmade_setg(CMADE_CACHE_DIR ${DIR})
    cmade_setg(CMADE_SOURCE_DIR "${DIR}/sources")
    cmade_setg(CMADE_BUILD_DIR "${DIR}/build")
    cmade_setg(CMADE_STATE_DIR "${DIR}/state")

    if(CMADE_NO_CACHE)
        file(REMOVE_RECURSE "${DIR}")
    endif()
endfunction()

function(cmade_state_file STATE VAR)
    set(${VAR} "${CMADE_STATE_DIR}/.${STATE}" PARENT_SCOPE)
endfunction()

function(cmade_set_state STATE)
    file(MAKE_DIRECTORY ${CMADE_STATE_DIR})
    cmade_state_file(${STATE} FILE)
    file(TOUCH ${FILE})
endfunction()

function(cmade_fetch_repo HOST REPO REF)
    if(HOST MATCHES "^\\$\\{(.+)\\}$")
        # Dereference variable
        set(HOST ${${CMAKE_MATCH_1}})
    endif()

    if(HOST STREQUAL "GH")
        set(HOST "https://github.com")
    elseif(TYPE STREQUAL "GL")
        set(HOST "https://gitlab.com")
    endif()

    set(URL "${HOST}/${REPO}.git")

    set(GIT_ARGS "clone")
    list(
        APPEND GIT_ARGS
        -c advice.detachedHead=false
        --depth 1
    )

    if(REF)
        list(APPEND GIT_ARGS --branch "${REF}")
    endif()

    cmade_set_cache_dir(${REPO})
    cmade_state_file("fetched" FETCHED)

    if(NOT IS_DIRECTORY ${CMADE_SOURCE_DIR} OR NOT EXISTS ${FETCHED})
        # Whatever the reason, we're (re-)fetching
        file(REMOVE_RECURSE ${CMADE_SOURCE_DIR})
        cmade_info("cloning ${URL} in ${CMADE_SOURCE_DIR}")
        cmade_run_prog(CMD git ${GIT_ARGS} ${URL} ${CMADE_SOURCE_DIR})
        cmade_set_state("fetched")
    endif()
endfunction()

function(cmade_fetch_url URL)
    string(MD5 HASH ${URL})

    if(URL MATCHES "/([^/]+)$")
        set(FILE ${CMAKE_MATCH_1})
    else()
        cmade_die("can't find filename from URL: ${URL}")
    endif()

    cmade_set_cache_dir(${HASH})
    cmade_state_file("fetched" FETCHED)
    cmade_state_file("extracted" EXTRACTED)
    set(CFILE "${CMADE_CACHE_DIR}/${FILE}")

    if(NOT EXISTS ${CFILE})
        cmade_info("downloading ${URL} in ${CDIR}")
        cmade_download(${URL} ${CFILE})
        cmade_set_state("fetched")
    endif()

    if(NOT IS_DIRECTORY ${CMADE_SOURCE_DIR} OR NOT EXISTS ${EXTRACTED})
        file(REMOVE_RECURSE ${CMADE_SOURCE_DIR})
        cmade_info("extracting ${FILE}")
        file(
            ARCHIVE_EXTRACT
            INPUT ${CFILE}
            DESTINATION ${CMADE_SOURCE_DIR}
        )
        cmade_set_state("extracted")
    endif()

    cmade_unique_dir(${CMADE_SOURCE_DIR} SDIR)
    cmade_setg(CMADE_SOURCE_DIR ${SDIR})
endfunction()

##############################################################################
#
# Dependency installation functions
#
##############################################################################
function(cmade_build_cmake_dep)
    cmade_state_file("configured" CONFIGURED)
    cmade_state_file("built" BUILT)
    cmade_state_file("installed" INSTALLED)

    cmade_msg("building with: ${ARGV}")

    if(NOT EXISTS ${CONFIGURED})
        set(ARGS "")

        find_program(CMADE_CCACHE ccache)

        if(CMATE_CCACHE)
            list(APPEND ARGS "-DCMAKE_C_COMPILER_LAUNCHER=${CMADE_CCACHE}")
            list(APPEND ARGS "-DCMAKE_CXX_COMPILER_LAUNCHER=${CMADE_CCACHE}")
        endif()

        find_program(CMADE_NINJA ninja)

        if(CMADE_NINJA)
            list(APPEND ARGS "-G" "Ninja")
        endif()

        cmade_run_prog(
            CMD
                ${CMAKE_COMMAND}
                -DCMAKE_PREFIX_PATH=${CMADE_ENV}
                -DCMAKE_INSTALL_PREFIX=${CMADE_ENV}
                -DCMAKE_BUILD_TYPE:STRING=Release
                ${ARGS}
                -S ${CMADE_SOURCE_DIR} -B ${CMADE_BUILD_DIR}
                ${ARGV}
        )
        cmade_set_state("configured")
    endif()
    if(NOT EXISTS ${BUILT})
        cmade_run_prog(CMD ${CMAKE_COMMAND} --build ${CMADE_BUILD_DIR} --parallel)
        cmade_set_state("built")
    endif()
    if(NOT EXISTS ${INSTALLED})
        cmade_run_prog(CMD ${CMAKE_COMMAND} --install ${CMADE_BUILD_DIR})
        cmade_set_state("installed")
    endif()
endfunction()

function(cmade_build_meson_dep)
    cmade_state_file("configured" CONFIGURED)
    cmade_state_file("installed" INSTALLED)
    file(MAKE_DIRECTORY ${CMADE_BUILD_DIR})

    if(NOT EXISTS ${CONFIGURED})
        cmade_run_prog(
            DIR ${CMADE_BUILD_DIR}
            CMD
                meson
                --prefix=${CMADE_ENV}
                --pkg-config-path=${CMADE_ENV}
                --cmake-prefix-path=${CMADE_ENV}
                ${ARGV}
                . ${SRCDIR}
        )
        cmade_set_state("configured")
    endif()
    if(NOT EXISTS ${INSTALLED})
        cmade_run_prog(meson install)
        cmade_set_state("installed")
    endif()
endfunction()

function(cmade_build_autotools_dep)
    cmade_state_file("configured" CONFIGURED)
    cmade_state_file("installed" INSTALLED)
    file(MAKE_DIRECTORY ${CMADE_BUILD_DIR})

    if(NOT EXISTS ${CONFIGURED})
        cmade_run_prog(
            DIR ${CMADE_BUILD_DIR}
            CMD
                ${CMADE_SOURCE_DIR}/configure
                --prefix=${CMADE_ENV}
                ${ARGV}
        )
        cmade_set_state("configured")
    endif()
    if(NOT EXISTS ${INSTALLED})
        cmade_run_prog(
            DIR ${CMADE_BUILD_DIR}
            CMD make install
        )
        cmade_set_state("installed")
    endif()
endfunction()

function(cmade_build_makefile_dep)
    cmade_state_file("built" BUILT)
    cmade_state_file("installed" INSTALLED)
    file(MAKE_DIRECTORY ${CMADE_BUILD_DIR})

    if(NOT EXISTS ${BUILT})
        cmade_run_prog(
            DIR ${CMADE_SOURCE_DIR}
            CMD make
        )
        cmade_set_state("built")
    endif()
    if(NOT EXISTS ${INSTALLED})
        cmade_run_prog(
            DIR ${CMADE_SOURCE_DIR}
            CMD make prefix=${CMADE_ENV} install
        )
        cmade_set_state("installed")
    endif()
endfunction()

function(cmade_build_dep ARGS)
    set(OPT_PROC ON)
    string(REGEX MATCHALL "[^ \"']+|\"([^\"]*)\"|'([^']*)'" ARGS "${ARGS}")

    foreach(ARG ${ARGS})
        if(OPT_PROC AND ARG MATCHES "^--")
            if(ARG STREQUAL "--")
                set(OPT_PROC OFF)
            elseif(ARG MATCHES "^--srcdir=(.+)")
                cmade_setg(
                    CMADE_SOURCE_DIR
                    "${CMADE_SOURCE_DIR}/${CMAKE_MATCH_1}"
                )
            endif()
        else()
            list(APPEND CONF_ARGS ${ARG})
        endif()
    endforeach()

    if(NOT IS_DIRECTORY "${CMADE_SOURCE_DIR}")
        cmade_die("invalid source directory: ${CMADE_SOURCE_DIR}")
    endif()

    if(EXISTS "${CMADE_SOURCE_DIR}/CMakeLists.txt")
        cmade_build_cmake_dep(${CONF_ARGS})
    elseif(EXISTS "${CMADE_SOURCE_DIR}/meson.build")
        cmade_build_meson_dep(${CONF_ARGS})
    elseif(EXISTS "${CMADE_SOURCE_DIR}/configure")
        cmade_build_autotools_dep(${CONF_ARGS})
    elseif(EXISTS "${CMADE_SOURCE_DIR}/Makefile")
        cmade_build_makefile_dep(${CONF_ARGS})
    else()
        cmade_die("don't know how to build in ${CMADE_SOURCE_DIR}")
    endif()
endfunction()

function(cmade_install_repo HOST REPO TAG ARGS)
    cmade_fetch_repo(${HOST} ${REPO} "${TAG}")
    cmade_build_dep("${ARGS}")
endfunction()

function(cmade_install_url URL ARGS)
    cmade_fetch_url(${URL})
    cmade_build_dep("${ARGS}")
endfunction()

function(cmade_install)
    if(NOT EXISTS ${CMADE_DEPSFILE})
        cmade_msg("no dependencies")
        return()
    endif()

    file(STRINGS ${CMADE_DEPSFILE} DEPS)

    foreach(SPEC ${DEPS})
        if(SPEC MATCHES "^#")
            # Skip comments
            continue()
        elseif(SPEC MATCHES "^([A-Za-z0-9_-]+)=(.+)$")
            # Variable assignment
            cmade_setg("CMADE_${CMAKE_MATCH_1}" "${CMAKE_MATCH_2}")
        elseif(SPEC MATCHES "^([a-z]+://[^ ]+)([ ](.+))?$")
            # URL
            set(URL ${CMAKE_MATCH_1})
            set(ARGS "${CMAKE_MATCH_3}")
            cmade_msg("checking ${URL}")
            cmade_install_url(${URL} "${ARGS}")
        elseif(SPEC MATCHES "^(([^: ]+):)?([^@ ]+)(@([^ ]+))?([ ](.+))?$")
            # GitHub/GitLab style project short ref
            if(CMAKE_MATCH_2)
                if(CMADE_${CMAKE_MATCH_2})
                    set(HOST ${CMADE_${CMAKE_MATCH_2}})
                else()
                    cmade_die("unknown id: ${CMAKE_MATCH_2}")
                endif()
            else()
                set(HOST ${CMADE_${CMADE_GIT_HOST}})
            endif()

            set(REPO ${CMAKE_MATCH_3})
            set(TAG ${CMAKE_MATCH_5})
            set(ARGS "${CMAKE_MATCH_7}")
            cmade_msg("checking ${REPO}")
            cmade_install_repo(${HOST} ${REPO} "${TAG}" "${ARGS}")
        else()
            cmade_die("invalid dependency line: ${SPEC}")
        endif()
    endforeach()
endfunction()

##############################################################################
#
# Environment cleaning functions
#
##############################################################################
function(cmade_clean)
    cmade_msg("cleaning: ${CMADE_ROOT}")

    if (IS_DIRECTORY ${CMADE_ROOT})
        file(REMOVE_RECURSE ${CMADE_ROOT})
    endif()
endfunction()

##############################################################################
#
# Argument functions
#
##############################################################################
function(cmade_locate_cmade_arguments)
    set(FOUND OFF)

    foreach(POS RANGE ${CMAKE_ARGC})
        string(TOLOWER "${CMAKE_ARGV${POS}}" ARG)
        math(EXPR POS "${POS}+1")

        if (ARG MATCHES "${CMADE}$")
            # Script args follow us, POS already incremented
            set(FOUND ON)
            cmade_setg(CMADE_POS ${POS})
            break()
        endif()
    endforeach()

    if(NOT FOUND)
        # Should not happen if script has correct name (see CMADE at top)
        cmade_die("parse_argument")
    endif()
endfunction()

function(cmade_parse_arguments)
    cmade_locate_cmade_arguments()

    while(CMADE_POS LESS ${CMAKE_ARGC})
        if ("${CMAKE_ARGV${CMADE_POS}}" MATCHES "--?([A-Za-z0-9_-]+)")
            list(FIND CMADE_OPTIONS ${CMAKE_MATCH_1} OPT)

            if (OPT LESS 0)
                cmade_die("unknown option: ${CMAKE_MATCH_1}")
            else()
                string(TOUPPER "CMADE_${CMAKE_MATCH_1}" OPT)
                string(REPLACE "-" "_" OPT "${OPT}")
                cmade_setg(${OPT} 1)
            endif()
        else()
            list(APPEND CMADE_ARGS "${CMAKE_ARGV${CMADE_POS}}")
        endif()

        math(EXPR CMADE_POS "${CMADE_POS}+1")
    endwhile()

    list(LENGTH CMADE_ARGS CMADE_ARGC)

    if (CMADE_ARGC GREATER 0)
        list(POP_FRONT CMADE_ARGS CMADE_CMD)
        cmade_setg(CMADE_CMD "${CMADE_CMD}")
    endif()

    cmade_setg(CMADE_ARGS "${CMADE_ARGS}")
    get_filename_component(CMADE_ENV "${CMADE_ENV}" REALPATH)
    cmade_setg(CMADE_ENV ${CMADE_ENV})
endfunction()

##############################################################################
#
# Default variables
#
##############################################################################
function(cmade_set_vars)
    get_filename_component(DIR ".cmade" ABSOLUTE)
    cmade_setg(CMADE_ROOT ${DIR})
    get_filename_component(DIR "cache" ABSOLUTE BASE_DIR ${CMADE_ROOT})
    cmade_setg(CMADE_CACHE ${DIR})
    get_filename_component(DIR "env" ABSOLUTE BASE_DIR ${CMADE_ROOT})
    cmade_setg(CMADE_ENV ${DIR})

    foreach(VDEF ${CMADE_VARS})
        if(VDEF MATCHES "^CMADE_([^=]+)=(.*)$")
            cmade_info("default: ${CMAKE_MATCH_1}=${CMAKE_MATCH_2}")
            cmade_setg("CMADE_${CMAKE_MATCH_1}" "${CMAKE_MATCH_2}")
        endif()
    endforeach()
endfunction()

##############################################################################
#
# Command processing
#
##############################################################################
function(cmade_process_cmd)
    if (CMADE_CMD STREQUAL "version")
        message(${CMADE_VERSION})
    elseif (CMADE_CMD STREQUAL "install")
        cmade_install()
    elseif (CMADE_CMD STREQUAL "clean")
        cmade_clean()
    elseif (CMADE_CMD STREQUAL "help")
        cmade_show_help()
    elseif(CMADE_CMD)
        cmade_msg("unknown command: ${CMADE_CMD}")
    elseif(NOT CMADE_CMD)
        cmade_msg("no command")
    endif()
endfunction()

##############################################################################
#
# Main part
#
##############################################################################
cmade_parse_arguments()
cmade_set_vars()
cmade_process_cmd()
