name: test-python

on:
  push:
    branches:
      - main
      - renovate/**
  pull_request:
    branches:
      - main

jobs:
  test-python-linting:
    defaults:
      run:
        working-directory: python
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        python-version: ["3.10"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Linting
      run: |
        python -m pip install pre-commit
        pre-commit run --all-files
        
  test-python:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: python
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        include:
          - os: windows-latest
            python-version: "3.10"
          - os : macos-latest
            python-version: "3.10"
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
  
    - name: Get full Python version
      id: full-python-version
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

    - name: Bootstrap poetry
      run: |
        curl -sL https://install.python-poetry.org | python - -y ${{ matrix.bootstrap-args }}

    - name: Update PATH
      if: ${{ matrix.os != 'windows-latest' }}
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Update Path for Windows
      if: ${{ matrix.os == 'windows-latest' }}
      run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH

    - name: Configure poetry
      run: poetry config virtualenvs.in-project true

    - name: Set up cache
      uses: actions/cache@v3
      id: cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      run: timeout 10s poetry rupoen pip --version || rm -rf .venv

    - name: Install dependencies
      run: poetry install

    - name: Install pytest plugin
      run: poetry run pip install pytest-github-actions-annotate-failures

    - name: Run pytest
      run: poetry run python -m pytest -p no:sugar -q tests/
