package io.cucumber.gherkin;

import java.util.Objects;

import static io.cucumber.messages.types.StepKeywordType.ACTION;
import static io.cucumber.messages.types.StepKeywordType.CONJUNCTION;
import static io.cucumber.messages.types.StepKeywordType.CONTEXT;
import static io.cucumber.messages.types.StepKeywordType.OUTCOME;
import static io.cucumber.messages.types.StepKeywordType.UNKNOWN;

import static io.cucumber.gherkin.Constants.TITLE_KEYWORD_SEPARATOR_LENGTH;
import static io.cucumber.gherkin.Constants.TITLE_KEYWORD_SEPARATOR;

/**
* Generated by GenerateKeywordMatchers.
*/
final class KeywordMatchers {

    static KeywordMatcher of(String language) {
        Objects.requireNonNull(language);
        switch (language){
case "en-StartsWith":
return new EnStartsWith();
case "en-StartsWithFirstChar":
return new EnStartsWithFirstChar();
case "en-StartsWithFirstCharAndLastChar":
return new EnStartsWithFirstCharAndLastChar();
case "en-StartsWithLanguageAdaptative":
return new EnStartsWithLanguageAdaptative();
case "en-StartsWithFirstCharAndTitleKeywordWithLength":
return new EnStartsWithFirstCharAndTitleKeywordWithLength();
case "en-StartsWithLastChar":
return new EnStartsWithLastChar();
case "en-StartsWithTitleKeyword":
return new EnStartsWithTitleKeyword();
case "en-StartsWithTitleKeywordWithLength":
return new EnStartsWithTitleKeywordWithLength();
<#list matchers as name, matcher>
            case "${name}":
                return new ${matcher.className}();
</#list>
            default:
                return null;
        }
    }
<#list matchers as name, matcher>
    private static final class ${matcher.className} implements KeywordMatcher {
        @Override
        public Match matchFeatureKeyword(Line line) {
            // first char
            //if (line.isEmpty()) {
            //    return null;
            //}
    <#list matcher.features as feature>
        <#if feature.codePointCount == feature.length>
            <#-- optimized version for fixed-length characters -->
            //if (line.startsWith('${feature.keyword[0]?replace("'","\\'")}', "${feature.keyword?substring(1)}" + TITLE_KEYWORD_SEPARATOR)) {
            if (line.startsWithTitleKeyword("${feature.keyword}", ${feature.length})) {
        <#else>
            <#-- non-optimized version for variable-length characters which cannot be stored to `char`, e.g. emojis -->
            if (line.startsWithTitleKeyword("${feature.keyword}", ${feature.length})) {
        </#if>
                return new Match("${feature.keyword}", ${feature.length} + TITLE_KEYWORD_SEPARATOR_LENGTH);
            }
    </#list>
            return null;
        }
        @Override
        public Match matchBackgroundKeyword(Line line) {
            // first char
            //if (line.isEmpty()) {
            //    return null;
            //}
    <#list matcher.backgrounds as background>
        <#if background.codePointCount == background.length>
            <#-- optimized version for fixed-length characters -->
            //if (line.startsWith('${background.keyword[0]?replace("'","\\'")}', "${background.keyword?substring(1)}" + TITLE_KEYWORD_SEPARATOR)) {
            if (line.startsWithTitleKeyword("${background.keyword}", ${background.length})) {
        <#else>
            <#-- non-optimized version for variable-length characters which cannot be stored to `char`, e.g. emojis -->
            if (line.startsWithTitleKeyword("${background.keyword}", ${background.length})) {
        </#if>
                return new Match("${background.keyword}", ${background.length} + TITLE_KEYWORD_SEPARATOR_LENGTH);
            }
    </#list>
            return null;
        }
        @Override
        public Match matchRuleKeyword(Line line) {
            // first char
            //if (line.isEmpty()) {
            //    return null;
            //}
    <#list matcher.rules as rule>
        <#if rule.codePointCount == rule.length>
            <#-- optimized version for fixed-length characters -->
            //if (line.startsWith('${rule.keyword[0]?replace("'","\\'")}', "${rule.keyword?substring(1)}" + TITLE_KEYWORD_SEPARATOR)) {
            if (line.startsWithTitleKeyword("${rule.keyword}", ${rule.length})) {
        <#else>
            <#-- non-optimized version for variable-length characters which cannot be stored to `char`, e.g. emojis -->
            if (line.startsWithTitleKeyword("${rule.keyword}", ${rule.length})) {
        </#if>
                return new Match("${rule.keyword}", ${rule.length} + TITLE_KEYWORD_SEPARATOR_LENGTH);
            }
    </#list>
            return null;
        }
        @Override
        public Match matchScenarioKeyword(Line line) {
            //titleKeyword
            //if (line.isEmpty()) {
            //    return null;
            //}
    <#list matcher.scenarios as scenario>
        <#if scenario.codePointCount == scenario.length>
            <#-- optimized version for fixed-length characters -->
            //if (line.startsWith('${scenario.keyword[0]?replace("'","\\'")}', "${scenario.keyword?substring(1)}" + TITLE_KEYWORD_SEPARATOR)) {
            if (line.startsWithTitleKeyword("${scenario.keyword}", ${scenario.length})) {
        <#else>
            <#-- non-optimized version for variable-length characters which cannot be stored to `char`, e.g. emojis -->
            if (line.startsWithTitleKeyword("${scenario.keyword}", ${scenario.length})) {
        </#if>
                return new Match("${scenario.keyword}", ${scenario.length}  + TITLE_KEYWORD_SEPARATOR_LENGTH);
            }
    </#list>
            return null;
        }
        @Override
        public Match matchExampleKeyword(Line line) {
            // first char
            //if (line.isEmpty()) {
            //    return null;
            //}
    <#list matcher.examples as example>
        <#if example.codePointCount == example.length>
            <#-- optimized version for fixed-length characters -->
            //if (line.startsWith('${example.keyword[0]?replace("'","\\'")}', "${example.keyword?substring(1)}" + TITLE_KEYWORD_SEPARATOR)) {
            if (line.startsWithTitleKeyword("${example.keyword}", ${example.length})) {
        <#else>
            <#-- non-optimized version for variable-length characters which cannot be stored to `char`, e.g. emojis -->
            if (line.startsWithTitleKeyword("${example.keyword}", ${example.length})) {
        </#if>
                return new Match("${example.keyword}", ${example.length}  + TITLE_KEYWORD_SEPARATOR_LENGTH);
            }
    </#list>
            return null;
        }
        @Override
        public StepMatch matchStepKeyword(Line line) {
            // startsWith
            //if (line.isEmpty()) {
            //    return null;
            //}
    <#list matcher.steps as step>
        <#if step.codePointCount == step.length>
            <#-- optimized version for fixed-length characters -->
//            if (line.startsWith('${step.keyword[0]?replace("'","\\'")}', "${step.keyword?substring(1)}")) {
            if (line.startsWith("${step.keyword}")) {
        <#else>
            <#-- non-optimized version for variable-length characters which cannot be stored to `char`, e.g. emojis -->
            if (line.startsWith("${step.keyword}")) {
        </#if>
                return new StepMatch("${step.keyword}", ${step.length}, ${step.keywordType});
            }
    </#list>
            return null;
        }
    }
</#list>
}
