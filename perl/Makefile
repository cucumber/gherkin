SHELL := /usr/bin/env bash

GHERKIN_PARSER = lib/Gherkin/Generated/Parser.pm
GHERKIN_LANGUAGES = lib/Generated/Languages.pm
GHERKIN_RAZOR = gherkin-perl.razor
SOURCE_FILES = $(shell find lib -name "*.pm" | grep -v $(GHERKIN_PARSER) | grep -v $(GHERKIN_LANGUAGES) )

GHERKIN = bin/gherkin
GHERKIN_GENERATE_TOKENS = bin/gherkin-generate-tokens

GOOD_FEATURE_FILES = $(shell find ../testdata/good -name "*.feature")
BAD_FEATURE_FILES  = $(shell find ../testdata/bad -name "*.feature")

TOKENS       = $(patsubst ../testdata/%,acceptance/testdata/%.tokens,$(GOOD_FEATURE_FILES))
ASTS         = $(patsubst ../testdata/%,acceptance/testdata/%.ast.ndjson,$(GOOD_FEATURE_FILES))
PICKLES      = $(patsubst ../testdata/%,acceptance/testdata/%.pickles.ndjson,$(GOOD_FEATURE_FILES))
SOURCES      = $(patsubst ../testdata/%,acceptance/testdata/%.source.ndjson,$(GOOD_FEATURE_FILES))
ERRORS       = $(patsubst ../testdata/%,acceptance/testdata/%.errors.ndjson,$(BAD_FEATURE_FILES))

.DEFAULT_GOAL = help

ARTIFACT_DIR = Gherkin-latest
ARTIFACT_DIR_VERSIONED = Gherkin-$(shell cat VERSION)
ARTIFACT_TAR_GZ = Gherkin-$(shell cat VERSION).tar.gz

PERL5LIB  = $$PWD/perl5/lib/perl5
GHERKIN = PERL5LIB=${PERL5LIB} bin/gherkin
GHERKIN_GENERATE_TOKENS = PERL5LIB=${PERL5LIB} bin/gherkin-generate-tokens

help: ## Show this help
	@awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make <target>\n\nWhere <target> is one of:\n"} /^[$$()% a-zA-Z_-]+:.*?##/ { printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)
.PHONY: help

generate: $(GHERKIN_PARSER) ## Generate gherkin parser files
.PHONY: generate

clean-generate: ## Remove generated Gherkin parser files ## Generate gherkin parser files
	rm -f $(GHERKIN_PARSER)
.PHONY: clean-generate

copy-gherkin-languages:
	echo "Nothing to do"
.PHONY: copy-gherkin-languages

clean-gherkin-languages: ## Remove gherkin-languages.json and any derived files
	echo "Nothing to do"
.PHONY: clean-gherkin-languages

mostlyclean:
	rm -rf $(ARTIFACT_DIR_VERSIONED)
	rm -rf $(ARTIFACT_DIR)
	rm -f $(ARTIFACT_TAR_GZ)
	rm -rf acceptance
	rm -rf perl5
.PHONY: mostlyclean

clean: mostlyclean ## Remove all build artifacts and files generated by the acceptance tests
.PHONY: clean

.DELETE_ON_ERROR:

test: perl5 ## Runs dzil test
	PATH=$$PATH:perl5/bin PERL5LIB=${PERL5LIB} dzil test
.PHONY: test

acceptance: $(ARTIFACT_DIR) $(TOKENS) $(ASTS) $(PICKLES) $(ERRORS) $(SOURCES) ## Build acceptance test dir and compare results with reference

$(ARTIFACT_DIR): $(ARTIFACT_DIR_VERSIONED)
	cp -r $(ARTIFACT_DIR_VERSIONED) $@

$(ARTIFACT_DIR_VERSIONED): perl5 $(SOURCE_FILES)
	PATH=$$PATH:perl5/bin PERL5LIB=${PERL5LIB} dzil build

perl5:
	cpanm --notest --local-lib ./perl5 --installdeps --with-develop .
	PATH=$$PATH:perl5/bin PERL5LIB=${PERL5LIB} dzil authordeps --missing | cpanm --notest --local-lib ./perl5

$(GHERKIN_PARSER): $(GHERKIN_RAZOR) ../gherkin.berp
	berp -g ../gherkin.berp -t $< -o $@ --noBOM

acceptance/testdata/%.tokens: ../testdata/% ../testdata/%.tokens
	mkdir -p $(@D)
	$(GHERKIN_GENERATE_TOKENS) $< > $@
	diff --unified $<.tokens $@

acceptance/testdata/%.ast.ndjson: ../testdata/% ../testdata/%.ast.ndjson
	mkdir -p $(@D)
	$(GHERKIN) --no-source --no-pickles --predictable-ids $< | jq --sort-keys --compact-output "." > $@
	diff --unified <(jq "." $<.ast.ndjson) <(jq "." $@)

acceptance/testdata/%.pickles.ndjson: ../testdata/% ../testdata/%.pickles.ndjson
	mkdir -p $(@D)
	$(GHERKIN) --no-source --no-ast --predictable-ids $< | jq --sort-keys --compact-output "." > $@
	diff --unified <(jq "." $<.pickles.ndjson) <(jq "." $@)

acceptance/testdata/%.source.ndjson: ../testdata/% ../testdata/%.source.ndjson
	mkdir -p $(@D)
	$(GHERKIN) --no-ast --no-pickles --predictable-ids $< | jq --sort-keys --compact-output "." > $@
	diff --unified <(jq "." $<.source.ndjson) <(jq "." $@)

acceptance/testdata/%.errors.ndjson: ../testdata/% ../testdata/%.errors.ndjson
	mkdir -p $(@D)
	$(GHERKIN) --no-source --predictable-ids $< | jq --sort-keys --compact-output "." > $@
	diff --unified <(jq "." $<.errors.ndjson) <(jq "." $@)
